#pragma once
#include <cglm/types.h>
#include "ocelot/engine/model.h"
#include "octane/oct_scene.h"
#include "types/uuid.h"
#include "data/hash_table.h"
#include <stdbool.h>
#include <stdint.h>

typedef enum
{
    OCL_SCENE_NODE_TYPE_SCENE,
    OCL_SCENE_NODE_TYPE_TRANSFORM,
    OCL_SCENE_NODE_TYPE_OBJECT,
    OCL_SCENE_NODE_TYPE_MESH,
    OCL_SCENE_NODE_TYPE_MAX
} ocl_sceneNodeType;

typedef struct ocl_scene            ocl_scene;

typedef struct ocl_sceneNode        ocl_sceneNode;
typedef struct ocl_sceneObject      ocl_sceneObject;

typedef struct ocl_sceneMesh        ocl_sceneMesh;

struct ocl_scene
{
    /* Amount of nodes (total) the scene has */
    uint32_t node_count;

    /* The raw scene node data */
    ocl_sceneNode* node_table;


    /* Amount of objects in the scene */
    uint32_t object_count;

    /* List of the scene objects */
    ocl_sceneObject* object_table;


    /* Amount of loaded game models in the geometry table */
    uint32_t mesh_count;

    /* All the scenes loaded models */
    ocl_sceneMesh* mesh_table;
};

struct ocl_sceneNode
{
    /* This nodes type */
    ocl_sceneNodeType type;

    /* global unique identifier */
    uuid_t uuid;

    /* Enabled object in the scene when true */
    bool is_enabled;

    /* The display name of this node */
    char* node_name;

    /* Cached reference to this nodes parent */
    ocl_sceneNode* parent;

    /* Amount of children this node has */
    uint32_t child_count;

    /* The children of this node */
    ocl_sceneNode** children;

    /* Represents a transformation relative to the parents coordinate space.
     * An identity matrix would represent this node sharing the parents orientation/pose */
    mat4 local_to_parent_matrix;

    /* Represents the chain of transformations from world space to the parents coordinate space.
     * An identity matrix would represent the parent being default orientation/pose.
     * This matrix is effectively a cached result of all the parents orientation matrices combined. */
    mat4 world_to_parent_matrix;

    /* Pointer to the object data if the node type is a geometry */
    ocl_sceneObject* object_ref;
};

/* Implements the Node/Geometry type */
struct ocl_sceneObject
{
    bool is_visible;

    char* mesh_name;

    uint32_t mesh_id;

    uint32_t mesh_count;

    ocl_sceneMesh** mesh_list;
};

struct ocl_sceneMesh
{
    /* Unique identifier for this mesh, generated by CRC */
    uint32_t id;

    /* The name of this mesh */
    char* mesh_name;

    //-Travis Scott
    bool is_lit;

    /* Amount of vertex stream references for this mesh */
    uint32_t vstream_ref_count;

    /* The vertex stream references this mesh uses */
    uint32_t* vstream_refs;

    /* The index stream reference for this mesh */
    uint32_t istream_ref;

    /* The loaded ocelot engine model */
    oce_model model;
};


/* Loads an oct files world data, decoupling data from the octane files */
ocl_scene ocl_load_oct_scene(oct_rawDataDescriptor desc, oct_file oct);

ocl_sceneMesh* ocl_find_mesh(ocl_scene scene, uint32_t mesh_id);

void ocl_link_child(ocl_scene* const scene, uint32_t parent_idx, uint32_t child_idx);

void ocl_unload_scene(ocl_scene* const scene);
